---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  S3BucketLambda:
    Type: String
    Description: The S3 bucket location where the lambda deployment package is stored.
    Default: kda-kpu-blog
  CloudWatchAlarmNameOut:
    Type: String
    Description: Alarm name for CloudWatch Alarm scale out
    Default: KDSScaleOutAlarm
  CloudWatchAlarmNameIn:
    Type: String
    Description: Alarm name for CloudWatch Alarm scale in
    Default: KDSScaleInAlarm
  ShardCount:
    Type: String
    Description: Number of initial shards
    Default: 8
  MyKinesisStream:
    Type: String
    Description: Kinesis Stream Name
  LambdaFunctionName:
    Type: String
    Description: Name for the lambda function that will be created
    Default: Kinesis-datastream-Autoscale-Lambda-Scaler

Resources:

  CustomApplicationAutoScalingServiceRole:
    DependsOn: MyApi
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - 
            Effect: 'Allow'
            Principal: 
              Service: 
                - 'custom-resource.application-autoscaling.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: "/"
      Policies: 
        - 
          PolicyName: 'DescribeAlarm'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: 'Allow'
                Action:
                  - 'cloudwatch:DescribeAlarms'
                Resource: '*'
        - 
          PolicyName: 'CWAlarms'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: 'Allow'
                Action:
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DeleteAlarms'
                Resource: 
                  - !Join ['', ['arn:aws:cloudwatch:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':alarm:', !Ref 'CloudWatchAlarmNameIn']]
                  - !Join ['', ['arn:aws:cloudwatch:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':alarm:', !Ref 'CloudWatchAlarmNameOut']]
        - 
          PolicyName: 'API-Invoke'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke*'
                Resource:
                - !Join ['', ['arn:aws:execute-api:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref MyApi, '/*/*/scalableTargetDimensions/*']]

  LambdaScaler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.6
      CodeUri: 
        Bucket: !Ref S3BucketLambda
        Key: kds.zip
      FunctionName: !Ref LambdaFunctionName    
      Policies:
        - Statement:
            - Sid: AmazonKinesisResources
              Effect: Allow
              Action:
                - kinesis:Describe*
                - kinesis:UpdateShardCount
              Resource: "*"
            - Sid: CFNDescribe
              Effect: Allow
              Action:
                - cloudformation:DescribeStackResources
              Resource: "*"
            - Sid: SSMResources
              Effect: Allow
              Action:
                - ssm:GetParameter*
                - ssm:PutParameter
              Resource: !Join ['', ['arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':parameter/', !Ref KinesisDesiredCapacityParameter]]
            - Sid: LambdaResources
              Effect: Allow
              Action: 
                - lambda:updateFunctionConfiguration
                - lambda:ListTags
              Resource: !Join ['', ['arn:aws:lambda:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':function:', !Ref LambdaFunctionName ]]
            - Sid: CloudWatch
              Effect: Allow
              Action:
                -   cloudwatch:PutMetricAlarm
                -   cloudwatch:DeleteAlarms
              Resource: 
                - !Join ['', ['arn:aws:cloudwatch:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':alarm:', !Ref 'CloudWatchAlarmNameIn']]
                - !Join ['', ['arn:aws:cloudwatch:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':alarm:', !Ref 'CloudWatchAlarmNameOut']]

      Environment:
        Variables:
          ParameterStore: !Ref KinesisDesiredCapacityParameter
          CloudWatchAlarmNameIn: !Ref CloudWatchAlarmNameIn
          CloudWatchAlarmNameOut: !Ref CloudWatchAlarmNameOut
      Events:
        KinesisAPI:
          Type: Api
          Properties:
            Path: /scalableTargetDimensions/{scalableTargetDimensionId}
            Method: GET
            RestApiId: !Ref MyApi
        KinesisAPIPatch:
          Type: Api
          Properties:              
            Path: /scalableTargetDimensions/{scalableTargetDimensionId}
            Method: PATCH                      
            RestApiId: !Ref MyApi

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: prod
        DefinitionBody:
          swagger: 2.0
          info:
            title:
              Ref: AWS::StackName
          securityDefinitions:
            sigv4:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: awsSigv4
          paths:
            "/scalableTargetDimensions/{scalableTargetDimensionId}":
              get:
                security:
                  - sigv4: []                
                x-amazon-apigateway-any-method:
                  produces:
                    - application/json
                  consumes:
                    - application/json
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  type: aws_proxy
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaScaler.Arn}/invocations
                responses: {} 

              patch:              
                security:
                  - sigv4: []                                
                x-amazon-apigateway-any-method:
                  security:
                    - sigv4: []
                  produces:
                    - application/json
                  consumes:
                    - application/json
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  type: aws_proxy
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaScaler.Arn}/invocations
                responses: {} 

  KinesisDesiredCapacityParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: "String"
      Value: !Ref ShardCount
      Description: "Store DesiredCapacity in Parameter Store"
      AllowedPattern: "[0-9]"


  KinesisAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: LambdaScaler
    Properties:
      MaxCapacity: 16
      MinCapacity: 1
      ResourceId: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/scalableTargetDimensions/${MyKinesisStream}
      RoleARN: !Sub ${CustomApplicationAutoScalingServiceRole.Arn}
      ScalableDimension: 'custom-resource:ResourceType:Property'
      ServiceNamespace: custom-resource

  AutoScalingPolicyOut:
    Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn: KinesisAutoScaling
    Properties: 
      PolicyName: KinesisScaleOut
      PolicyType: StepScaling
      ResourceId: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/scalableTargetDimensions/${MyKinesisStream}      
      ScalableDimension: "custom-resource:ResourceType:Property"
      ServiceNamespace: custom-resource
      StepScalingPolicyConfiguration: 
        AdjustmentType: ChangeInCapacity
        Cooldown: 600
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1   

  AutoScalingPolicyIn:
    Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn: KinesisAutoScaling
    Properties: 
      PolicyName: KinesisScaleIn
      PolicyType: StepScaling
      ResourceId: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/scalableTargetDimensions/${MyKinesisStream}      
      ScalableDimension: "custom-resource:ResourceType:Property"
      ServiceNamespace: custom-resource
      StepScalingPolicyConfiguration: 
        AdjustmentType: ChangeInCapacity
        Cooldown: 600
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1


  CWAlarmOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Ref CloudWatchAlarmNameOut
      AlarmDescription: 'incomingRecord exceeds threshold'
      MetricName: 'IncomingRecords'
      Namespace: 'AWS/Kinesis'
      Dimensions:
        -
          Name: StreamName
          Value: !Ref MyKinesisStream
      Statistic: 'Sum'
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1000
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref AutoScalingPolicyOut

  CWAlarmIn:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Ref CloudWatchAlarmNameIn
      AlarmDescription: 'incomingRecord below threshold'
      MetricName: 'IncomingRecords'
      Namespace: 'AWS/Kinesis'
      Dimensions:
        -
          Name: StreamName
          Value: !Ref MyKinesisStream
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 3
      Threshold: 700
      ComparisonOperator: 'LessThanThreshold'
      AlarmActions:
        - !Ref AutoScalingPolicyIn


Outputs:
  URL:
    Description: the URL
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/scalableTargetDimensions/${MyKinesisStream}
